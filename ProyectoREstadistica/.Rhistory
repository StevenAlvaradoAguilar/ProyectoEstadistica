calidadaire <- data("airquality")
head(calidadaire)
str(calidadaire)
airquality[, 2]
calidadaire[, 2]
data(airquality)
calidadaire <- data(airquality)
head(calidadaire)
airquality[, 2]
calidadaire[, 2]
calidadaire <- airquality
head(calidadaire)
airquality[, 2]
calidadaire[, 2]
head(calidadaire)
head(calidadaire, 5)
str(calidadaire)
dat1 <- read_csv2("Datos/EjemploEstudiantes.csv")
dat1 <- read_csv2("Datos/EjemploEstudiantes.csv")
View(dat1)
round(pago, digits = 1)
#
round(pago, digits = 0)
#
round(pago, digits = 2)
#
round(pago, digits = 3)
#
round(pago, digits = 0)
#
b <- c(4, 6, 8,12,-2)
a <- c(3, 6, 9, 2, -5)
a[a < b & a < 0]
datos
datos[2]
datos$Peso
datos[, 2]
datos$Peso
datos[1, ]
datos[1, ]
View(datos)
datos$Color.ojos
datos[, 2]
datos$Color.ojos
datos[, 1]
x<-c(161,203,235,176,201,188,228,211,191,178)
y<-c(159,206,241,163,197,193,209,189,169,201)
sexo <- factor(c("Hombre","Mujer","Mujer","Hombre","Hombre","Hombre","Mujer","Hombre","Mujer","Mujer"))
Datos.Pruebas <- data.frame(Prueba.escrita = x, Prueba.oral = y, Sexo = sexo)
Datos.Pruebas
Datos.Pruebas[3,]
Datos.Pruebas[8,]
# Potencias
3^4
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
library(WWWusage)
library(WWWusage)
library(WWWusage)
library(ability.cov)
require(stats)
(ability.FA <- factanal(factors = 1, covmat = ability.cov))
update(ability.FA, factors = 2)
## The signs of factors and hence the signs of correlations are
## arbitrary with promax rotation.
update(ability.FA, factors = 2, rotation = "promax")
library(MASS)
library(ability.cov)
clean
library(ability.cov)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
library(ability.cov)
library(ability.cov)
library(MASS)
# Se planta la semilla
set.seed(45)
# Se establecen los índices para la muestra
flores.elegidas.setosa <- sample(1:50, 40, replace = TRUE)
flores.elegidas.versicolor <- sample(51:100, 40, replace = TRUE)
# Se extraen las muestras
muestra.setosa <- iris[flores.elegidas.setosa, ]
muestra.versicolor <- iris[flores.elegidas.versicolor, ]
# Se aplica la prueba de hipótesis
t.test(muestra.setosa$Petal.Length, muestra.versicolor$Petal.Length,
alternative = "two.sided")
library(readr)
# Este paquete es usado para cargar bases de datos
data(ability.cov)
force(ability.cov)
data(ability.cov)
force(ability.cov)
data(airquality)
# se almacena en una variable para uso posterior
calidadaire <- airquality
head(calidadaire, 5)
View(airquality)
data(ability.cov)
head(ability.cov)
View(ability.cov)
head(ability.cov)
data(ability.cov)
summary(ability.cov)
summary(ability.cov) <- factanal cov
summary(ability.cov) <- cov
summary(ability.cov)
data(ability.cov)
str(bility.cov)
View(airquality)
View(estudiantes)
View(muestra.setosa)
View(muestra.versicolor)
View(peliculas_df)
View(x1)
head(ability.cov)
?ability.cov
summary(ability.cov)
head(ability.cov)
summary(ability.cov)
summary(ability.cov)
str(bility.cov)
str(ability.cov)
vis_dat(ability.cov)
vis_dat(ability.cov <- cov)
vis_dat(ability.cov)
vis_dat(ability.cov())
str(ability.cov)
summary(ability.cov)
summary(ability.cov)
head(ability.cov)
?ability.cov
summary(ability.cov)
head(ability.cov)
summary(ability.cov)
summary(ability.cov)
summary(ability.cov)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
data(ability.cov)
?ability.cov
head(ability.cov)
summary(ability.cov)
vis_dat(cov())
vis_dat(ability.cov <- cov(x))
vis_guess(ability.cov)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
install.packages(c("visdat", "DataExplorer", "mosaicData", "ggplot2", "colorspace", "dplyr", "GGally", "tidyr", "PerformanceAnalytics", "psych", "ggraph", "plotly", "datos"))
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
data(airquality)
force(airquality)
View(airquality)
?airquality
head(airquality)
summary(airquality)
str(airquality)
vis_dat(airquality)
install.packages("tidyverse")
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
vis_dat(airquality)
vis_dat(airquality)
getwd()
vis_dat(airquality)
vis_dat(airquality)
vis_dat(airquality)
vis_guess(airquality)
vis_dat(airquality)
vis_guess(airquality)
summary(airquality)
str(airquality)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
data(airquality)
?airquality
head(airquality)
head(airquality)
summary(airquality)
str(airquality)
vis_dat(airquality)
vis_guess(airquality)
install.packages("GGally")
install.packages("GGally")
vis_dat(airquality)
vis_guess(airquality)
str(airquality)
vis_dat(airquality)
vis_guess(airquality)
vis_dat(airquality)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("datos")
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
?airquality
head(airquality)
?airquality
head(airquality)
summary(airquality)
str(airquality)
vis_dat(airquality)
vis_guess(airquality)
vis_miss(airquality)
aire <- na.omit(airquality)
vis_dat(aire)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
?airquality
head(airquality)
head(airquality)
head(airquality)
summary(airquality)
str(airquality)
vis_dat(airquality)
vis_guess(airquality)
vis_miss(airquality)
plot_missing(airquality) # Me indica si tenemos datos en blanco y me da una recomendación, que en este caso dice que es "Good y Ok", lo cual no es mucho problema
# Use ?plot_missing() si desea conocer más sobre esta función
plot_missing(airquality) # Me indica si tenemos datos en blanco y me da una recomendación, que en este caso dice que es "Good y Ok", lo cual no es mucho problema
# Use ?plot_missing() si desea conocer más sobre esta función
vis_miss(airquality)
plot_missing(airquality) # Me indica si tenemos datos en blanco y me da una recomendación, que en este caso dice que es "Good y Ok", lo cual no es mucho problema
# Use ?plot_missing() si desea conocer más sobre esta función
aire <- na.omit(airquality)
vis_dat(aire)
ggplot(aire, aes(Month))
ggplot(aire, aes(Month))
ggplot(aire, aes(Month))
ggplot(aire, aes(Month,Ozone )) +
geom_boxplot(alpha = 0.4, color = "blue", aes(group = cut_width(Month, 1)))
ggplot(aire, aes(Month))
ggplot(aire, aes(Month,Ozone )) +
geom_boxplot(alpha = 0.4, color = "blue", aes(group = cut_width(Month, 1)))
ggplot(aire, aes(Month))
ggplot(aire, aes(Month,Ozone )) +
geom_boxplot(alpha = 0.4, color = "blue", aes(group = cut_width(Month, 1)))
aire$Mes <- ifelse(aire$Month == 5, "Mayo",
ifelse (aire$Month == 6, "Junio",
ifelse(aire$Month == 7,"Julio",
ifelse(aire$Month == 8, "Agosto","Septiembre")
)
)
)
aire$Mes <- factor(aire$Mes, levels = c("Mayo","Junio","Julio","Agosto","Septiembre"))
ggplot(aire, aes(Mes, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19)
aire$Mes <- ifelse(aire$Month == 5, "Mayo",
ifelse (aire$Month == 6, "Junio",
ifelse(aire$Month == 7,"Julio",
ifelse(aire$Month == 8, "Agosto","Septiembre")
)
)
)
aire$Mes <- factor(aire$Mes, levels = c("Mayo","Junio","Julio","Agosto","Septiembre"))
aire$Mes <- ifelse(aire$Month == 5, "Mayo",
ifelse (aire$Month == 6, "Junio",
ifelse(aire$Month == 7,"Julio",
ifelse(aire$Month == 8, "Agosto","Septiembre")
)
)
)
aire$Mes <- factor(aire$Mes, levels = c("Mayo","Junio","Julio","Agosto","Septiembre"))
ggplot(aire, aes(Mes, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19)
ggplot(aire, aes(Month,Ozone )) +
geom_boxplot(alpha = 0.4, color = "blue", aes(group = cut_width(Month, 1)))
ggplot(aire, aes(Month,Ozone )) +
geom_boxplot(alpha = 0.4, color = "blue", aes(group = cut_width(Month, 1)))
aire$Mes <- ifelse(aire$Month == 5, "Mayo",
ifelse (aire$Month == 6, "Junio",
ifelse(aire$Month == 7,"Julio",
ifelse(aire$Month == 8, "Agosto","Septiembre")
)
)
)
aire$Mes <- factor(aire$Mes, levels = c("Mayo","Junio","Julio","Agosto","Septiembre"))
ggplot(aire, aes(Mes, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19)
ggplot(aire, aes(Mes, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19, outlier.color = "red", aes(fill = Month)) +
geom_point(alpha = 0.2)
ggplot(aire, aes(Month, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19, outlier.color = "red", aes(fill = Mes)) +
geom_point(alpha = 0.2)
ggplot(aire, aes(Mes, Ozone)) +
geom_boxplot(alpha = 0.4, color = "dodgerblue4", outlier.shape = 19, outlier.color = "red", aes(fill = Month))+
labs(title = "Media diaria de Ozono en ppm, por mes", subtitle = "Roosevel Island según mes, del 1 de mayo al 30 de septiembre 1973", y = "Ozono")
# g1 es una variables que almacena la primera capa del gráfico a crear
g1 <- ggplot(aire, aes(Mes, Ozone))
g1 +
geom_violin(aes(fill = Month, alpha = 0.3))
g1 +
geom_jitter(width = 0.3, alpha = 0.4) +
geom_violin(aes(fill = Month, alpha = 0.3))
g1 +
geom_jitter(width = 0.3, alpha = 0.4) +
geom_violin(aes(fill = Month, alpha = 0.3))
g1 +
geom_jitter(width = 0.3, alpha = 0.4) +
geom_boxplot(alpha = 0.4, color = "blue") +
geom_violin(aes(alpha = 0.3, fill = Month))
est <- aire %>%
group_by(Mes) %>%
summarise(media = mean(Ozone),
n = n(),
de = sd(Ozone),
ee = de/sqrt(n()),
li = media - 1.96*ee,
ls = media +1.96*ee
)
est
g1 +
geom_jitter(width = 0.3, alpha = 0.4) +
geom_boxplot() +
geom_violin(aes(alpha = 0.3, fill = Month)) +
theme_minimal() +
geom_point(data = est, aes(Mes, media)) +
geom_errorbar(data = est, aes(Mes, media, ymin = li, ymax = ls), width = 0.2, color ="red")
ggplot(aire, aes(Mes)) +
geom_bar(aes(fill = Month))
mescont <- aire %>%
group_by(Mes) %>%
summarize(conteo = n() )
ggplot(mescont, aes(Mes, conteo)) +
geom_col(fill = "steelblue", width = 0.015) +
geom_point(color = "darkorange", size = 5) +
geom_text(aes(label = conteo), size = 2)
ggplot(aire, aes(Month)) +
geom_bar(aes(fill = Mes))
mescont <- aire %>%
group_by(Mes) %>%
summarize(conteo = n() )
ggplot(mescont, aes(Mes, conteo)) +
geom_col(fill = "steelblue", width = 0.015) +
geom_point(color = "darkorange", size = 5) +
geom_text(aes(label = conteo), size = 2)
graf1 <- ggplot(aire, aes(Month)) +
geom_bar(aes(fill = Mes))
ggplotly(graf1)
lollipops <- ggplot(mescont, aes(Mes, conteo)) +
geom_col(fill = "steelblue", width = 0.015) +
geom_point(color = "darkorange", size = 5) +
geom_text(aes(label = conteo), size = 2)
ggplotly(lollipops)
str(diamantes)
diamantesdata <- diamantes
ggplot(data = diamantesdata) +
geom_bar(mapping = aes(x = corte)) # aes: define una variable para la estética
diamantesgrupo <- diamantesdata %>%
group_by(corte) %>%
summarize(cantidad = n()
)
diamantesgrupo$proporcion <- diamantesgrupo$cantidad/sum(diamantesgrupo$cantidad)
diamantesgrupo <- diamantesdata %>%
group_by(corte) %>%
summarize(cantidad = n()
)
diamantesgrupo$proporcion <- diamantesgrupo$cantidad/sum(diamantesgrupo$cantidad)
ggplot(data = diamantesgrupo) +
geom_bar(mapping = aes(x = reorder(corte, cantidad), y = cantidad) ,stat="identity", position="dodge")
ggplot(data = diamantesgrupo) +
geom_bar(mapping = aes(x = reorder(corte, -cantidad), y = cantidad) ,stat="identity", position="dodge")
ggplot(data = diamantesgrupo) +
geom_bar(mapping = aes(x = reorder(corte, -proporcion), y = proporcion, group = 1) ,stat="identity", position="dodge")
ggplot(data = diamantesgrupo) +
geom_bar(mapping = aes(x = reorder(corte, -cantidad), y = cantidad, colour = corte) ,stat="identity", position="dodge")
ggplot(data = diamantesgrupo) +
geom_bar(mapping = aes(x = reorder(corte, -cantidad), y = cantidad, fill = corte) ,stat="identity", position="dodge")
ggplot(data = diamantesdata) +
geom_bar(mapping = aes(x = corte, fill = color))
ggplot(data = diamantesdata) +
geom_bar(mapping = aes(x = corte, fill = color), position = "jitter")
ggplot(data = diamantes) +
geom_bar(mapping = aes(x = corte, fill = color), position = "fill")
ggplot(data = diamantes) +
geom_bar(mapping = aes(x = corte, fill = corte), position = "dodge") +
coord_flip()
bar <- ggplot(data = diamantes) +
geom_bar(
mapping = aes(x = corte, fill = corte),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar
bar +
coord_flip()
bar +
coord_polar()
bar +
coord_flip()
bar +
coord_polar()
bar2 <- ggplot(data = diamantes) +
geom_bar(mapping = aes(x = corte, fill = color),
show.legend = F,
width = 0.75) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar2 +
coord_polar()
install.packages("ymlthis")
aire <- na.omit(airquality)
vis_dat(aire)
