# Chunk 23
set.seed(1000)
muestra.iris <- sample(1:150,30,replace = TRUE)
long.petalo.muestra <- iris[muestra.iris, ]$Petal.Length
t.test(long.petalo.muestra,conf.level = 0.95)$conf.int
# Chunk 24
# Se genera la población de valores
set.seed(2020)
valores.poblacion <- rnorm(10^7)
# Se calcula la media poblacional
mu <- mean(valores.poblacion)
# Se toman 200 muestras usando la función "replicate" de R, que permite ejecutar una misma función las veces que se le indique
muestras <- replicate(200, sample(valores.poblacion, 50, replace = TRUE))
str(muestras)
# Chunk 25
# Se define la función IC.t que nos da el IC para la media dada para una muestra
IC.t <- function(X, confianza = 0.95){t.test(X,
conf.level = confianza)$conf.int}
ICs <- apply(muestras, FUN = IC.t, MARGIN = 2)
# Conteo de aciertos
Aciertos <- length(which((mu >= ICs[1,]) & (mu <= ICs[2,])))
Aciertos
# Chunk 26
plot(1, type = "n", xlim = c(-0.8, 0.8), ylim = c(0, 200), xlab = "Valores",
ylab = "Repeticiones", main = "")
seg.int <- function(i){
color = "light blue"
if((mu < ICs[1,i]) | (mu > ICs[2,i])){
color = "red"
}
segments(ICs[1,i], i, ICs[2,i], i, col = color, lwd = 2)
}
head(sapply(1:200, FUN = seg.int), 0)
# Chunk 27
abline(v = mu,lwd = 2)
# Chunk 28
tiempo <- c(12, 13, 13, 14, 14, 14, 15, 15, 16, 17,
17, 18, 18, 19, 19, 25, 25, 26, 27, 30,
33, 34, 35, 40, 40, 51, 51, 58, 59, 83)
# Chunk 29
# Varianza muestral
n <- 30
s.tiempo <- var(tiempo)
# Calcule los valores de la distribución o cuantiles
alpha <- 0.05
chi2.izq <- qchisq(1-alpha/2, n-1)
chi2.der <- qchisq(alpha/2, n-1)
# IC para la varianza:
ICvar <- c((n-1)*s.tiempo/chi2.izq, (n-1)*s.tiempo/chi2.der)
ICvar
# Chunk 30
# IC para la desviación estándar
sqrt(ICvar)
# Chunk 31
# IC para la varianza
varTest(tiempo, conf.level = 0.95)$conf.int
# Chunk 32
# IC para al desviación estándar
sqrt(varTest(tiempo, conf.level = 0.95)$conf.int)
# Chunk 33
# Se extraen la mediciones de sépalo de la muestra
amplitud.sepalo.muestra <- iris[flores.elegidas, ]$Sepal.Width
head(amplitud.sepalo.muestra, 10)
# Chunk 34
# Se calcula el IC de 95% para la varianza de las ampliudes de sépalo de los datos iris
varTest(amplitud.sepalo.muestra, conf.level = 0.95)$conf.int
# Chunk 35
# Se lee la base de datos desde el enlace y se almacena en datos
url <- 'https://raw.githubusercontent.com/fhernanb/datos/master/medidas_cuerpo'
datos <- read.table(file = url, header = T)
#Se extraen datos de hombres y mujeres
hombres <- datos[datos$sexo == "Hombre", ]
mujeres <- datos[datos$sexo == "Mujer", ]
dim(hombres)
# Chunk 36
dim(mujeres)
# Chunk 37
str(hombres)
# Chunk 38
str(mujeres)
# Chunk 39
# Media de hombres menos media de mujeres
t.test(hombres$altura, mujeres$altura,conf.level = 0.95)$conf.int
# Chunk 40
# Media de mujeres menos media de hombres
t.test(mujeres$altura, hombres$altura, conf.level = 0.95)$conf.int
aire <- na.omit(airquality)
vis_dat(aire)
aire <- na.omit(airquality)
var(aire$Ozone)
vis_dat(aire)
aire <- na.omit(airquality)
var(aire$Ozone)
vis_dat(aire)
aire <- na.omit(airquality)
var(aire$Ozone)
vis_dat(aire)
aire <- na.omit(airquality)
mean(aire$Ozone)
sd(aire$Ozone)
var(aire$Ozone)
vis_dat(aire)
install.packages("ate")
install.packages("stest")
install.packages("test")
ICZ <- function(x, sigma, alpha){
c(mean(x) - qnorm(1-alpha/2)*sigma/sqrt(length(x)),
mean(x) + qnorm(1-alpha/2)*sigma/sqrt(length(x)))}
ICZ <- function(x, sigma, alpha){
c(mean(x) - qnorm(1-alpha/2)*sigma/sqrt(length(x)),
mean(x) + qnorm(1-alpha/2)*sigma/sqrt(length(x)))}
set.seed(2)
muestra <- sample(Poblacion, 50, replace = T)
str(muestra)
set.seed(2)
muestra <- sample(Poblacion, 50, replace = T)
str(muestra)
# Chunk 1
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
library(epitools)
library(EnvStats)
library(stests)
library(PASWR2)
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
?airquality
# Chunk 4
head(airquality)
# Chunk 5
summary(airquality)
# Chunk 6
str(airquality)
# Chunk 7
vis_dat(airquality)
# Chunk 8
vis_guess(airquality)
# Chunk 9
vis_miss(airquality)
# Chunk 10
plot_missing(airquality) # Me indica si tenemos datos en blanco y me da una recomendación, que en este caso dice que es "Good y Ok", lo cual no es mucho problema
# Use ?plot_missing() si desea conocer más sobre esta función
# Chunk 11
aire <- na.omit(airquality)
mean(aire$Ozone)
sd(aire$Ozon)
var(aire$Ozone)
vis_dat(aire)
# Chunk 12
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
# Chunk 13
ICZ <- function(x, sigma, alpha){
c(mean(x) - qnorm(1-alpha/2)*sigma/sqrt(length(x)),
mean(x) + qnorm(1-alpha/2)*sigma/sqrt(length(x)))}
set.seed(2)
muestra <- sample(Poblacion, 50, replace = T)
str(muestra)
install.packages("stests")
# Se planta la semilla
set.seed(45)
# Se establecen los índices para la muestra
flores.elegidas.setosa <- sample(1:50, 40, replace = TRUE)
flores.elegidas.versicolor <- sample(51:100, 40, replace = TRUE)
# Se extraen las muestras
muestra.setosa <- iris[flores.elegidas.setosa, ]
muestra.versicolor <- iris[flores.elegidas.versicolor, ]
# Se aplica la prueba de hipótesis
t.test(muestra.setosa$Petal.Length, muestra.versicolor$Petal.Length,
alternative = "two.sided")
t.test(muestra.setosa$Petal.Length, muestra.versicolor$Petal.Length,
alternative="two.sided", var.equal = TRUE)
cisim(100, 50, 0.5, type = "Pi", conf.level = 0.92)
plot(1:10, type = "n", xlim =c(1.2, 1.8), ylim = c(0, 100),
xlab = "Valores", ylab = "Replicaciones")
seg.int <- function(i){color = "grey";
if((mu< M[1,i]) | (mu > M[2,i])){color = "red"}
segments(M[1,i], i, M[2,i],i, col = color,lwd = 3)}
invisible(sapply(1:100, FUN = seg.int))
abline(v = mu,lwd = 3)
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
poblacion
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
poblacion
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
Poblacion
vis_dat(airquality)
vis_dat(airquality)
vis_guess(airquality)
vis_guess(airquality)
# Chunk 1
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
library(epitools)
library(EnvStats)
library(stests)
library(PASWR2)
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
?airquality
# Chunk 4
head(airquality)
# Chunk 5
summary(airquality)
# Chunk 6
str(airquality)
# Chunk 7
vis_dat(airquality)
# Chunk 8
vis_guess(airquality)
# Chunk 9
vis_miss(airquality)
# Chunk 10
plot_missing(airquality) # Me indica si tenemos datos en blanco y me da una recomendación, que en este caso dice que es "Good y Ok", lo cual no es mucho problema
# Use ?plot_missing() si desea conocer más sobre esta función
# Chunk 11
aire <- na.omit(airquality)
vis_dat(aire)
# Chunk 12
set.seed(1012)
mu = 1.5; sigma = 1; alpha = 0.05
Poblacion = rnorm(10^6,mu,sigma)
Poblacion
# Chunk 13
ICZ <- function(x, sigma, alpha){
c(mean(x) - qnorm(1-alpha/2)*sigma/sqrt(length(x)),
mean(x) + qnorm(1-alpha/2)*sigma/sqrt(length(x)))}
# Chunk 14
set.seed(2)
muestra <- sample(Poblacion, 50, replace = T)
str(muestra)
# Chunk 15
is.vector(muestra)
# Chunk 16
M <- replicate(100, ICZ(sample(Poblacion, 50, replace = T), sigma, alpha))
head(M, 1)
# Chunk 17
plot(1:10, type = "n", xlim =c(1.2, 1.8), ylim = c(0, 100),
xlab = "Valores", ylab = "Replicaciones")
seg.int <- function(i){color = "grey";
if((mu< M[1,i]) | (mu > M[2,i])){color = "red"}
segments(M[1,i], i, M[2,i],i, col = color,lwd = 3)}
invisible(sapply(1:100, FUN = seg.int))
abline(v = mu,lwd = 3)
# Chunk 18
#install.packages("PASWR2", dependencies = T)
cisim(samples = 100, n = 30, parameter = 100, sigma = 10, conf.level = 0.90)
# Chunk 19
cisim(100, 50, 0.5, type = "Pi", conf.level = 0.92)
# Chunk 20
cisim(100, 30, 100, 10, type = "Var")
# Chunk 21
temperatura <- c(36,35,38,38,36,37,38,36,37,36,
37,37,34,38,35,37,36,36,34,38,
36,37,35,35,35,35,36,36,36,35,
36,35,34,34,37,37,35,36,34,36)
ICtemp <- ICZ(temperatura, sd(temperatura), 0.1)
ICtemp
# Chunk 22
## Función para calcular el tamaño de muestra "n"
n <- function(radio,sigma,alpha){
ceiling(((qnorm(alpha/2)*sigma)/radio)^2)}
n(0.05, sd(temperatura), 0.1)
# Chunk 23
set.seed(1000)
muestra.iris <- sample(1:150,30,replace = TRUE)
long.petalo.muestra <- iris[muestra.iris, ]$Petal.Length
t.test(long.petalo.muestra,conf.level = 0.95)$conf.int
# Chunk 24
# Se genera la población de valores
set.seed(2020)
valores.poblacion <- rnorm(10^7)
# Se calcula la media poblacional
mu <- mean(valores.poblacion)
# Se toman 200 muestras usando la función "replicate" de R, que permite ejecutar una misma función las veces que se le indique
muestras <- replicate(200, sample(valores.poblacion, 50, replace = TRUE))
str(muestras)
# Chunk 25
# Se define la función IC.t que nos da el IC para la media dada para una muestra
IC.t <- function(X, confianza = 0.95){t.test(X,
conf.level = confianza)$conf.int}
ICs <- apply(muestras, FUN = IC.t, MARGIN = 2)
# Conteo de aciertos
Aciertos <- length(which((mu >= ICs[1,]) & (mu <= ICs[2,])))
Aciertos
# Chunk 26
plot(1, type = "n", xlim = c(-0.8, 0.8), ylim = c(0, 200), xlab = "Valores",
ylab = "Repeticiones", main = "")
seg.int <- function(i){
color = "light blue"
if((mu < ICs[1,i]) | (mu > ICs[2,i])){
color = "red"
}
segments(ICs[1,i], i, ICs[2,i], i, col = color, lwd = 2)
}
head(sapply(1:200, FUN = seg.int), 0)
# Chunk 27
abline(v = mu,lwd = 2)
# Chunk 28
tiempo <- c(12, 13, 13, 14, 14, 14, 15, 15, 16, 17,
17, 18, 18, 19, 19, 25, 25, 26, 27, 30,
33, 34, 35, 40, 40, 51, 51, 58, 59, 83)
# Chunk 29
# Varianza muestral
n <- 30
s.tiempo <- var(tiempo)
# Calcule los valores de la distribución o cuantiles
alpha <- 0.05
chi2.izq <- qchisq(1-alpha/2, n-1)
chi2.der <- qchisq(alpha/2, n-1)
# IC para la varianza:
ICvar <- c((n-1)*s.tiempo/chi2.izq, (n-1)*s.tiempo/chi2.der)
ICvar
# Chunk 30
# IC para la desviación estándar
sqrt(ICvar)
# Chunk 31
# IC para la varianza
varTest(tiempo, conf.level = 0.95)$conf.int
# Chunk 32
# IC para al desviación estándar
sqrt(varTest(tiempo, conf.level = 0.95)$conf.int)
# Chunk 33
# Se extraen la mediciones de sépalo de la muestra
amplitud.sepalo.muestra <- iris[flores.elegidas, ]$Sepal.Width
head(amplitud.sepalo.muestra, 10)
# Chunk 34
# Se calcula el IC de 95% para la varianza de las ampliudes de sépalo de los datos iris
varTest(amplitud.sepalo.muestra, conf.level = 0.95)$conf.int
# Chunk 35
# Se lee la base de datos desde el enlace y se almacena en datos
url <- 'https://raw.githubusercontent.com/fhernanb/datos/master/medidas_cuerpo'
datos <- read.table(file = url, header = T)
#Se extraen datos de hombres y mujeres
hombres <- datos[datos$sexo == "Hombre", ]
mujeres <- datos[datos$sexo == "Mujer", ]
dim(hombres)
# Chunk 36
dim(mujeres)
# Chunk 37
str(hombres)
# Chunk 38
str(mujeres)
# Chunk 39
# Media de hombres menos media de mujeres
t.test(hombres$altura, mujeres$altura,conf.level = 0.95)$conf.int
# Chunk 40
# Media de mujeres menos media de hombres
t.test(mujeres$altura, hombres$altura, conf.level = 0.95)$conf.int
vis_dat(airquality)
vis_guess(airquality)
vis_miss(airquality)
vis_miss(airquality)
vis_miss(airquality)
library(visdat) # Paquete con varias herramientas para visualizar datos
library(DataExplorer) #Para usar la función plot_missing
library(mosaicData) # Paquete que contiene bases de datos
library(ggplot2) # paquete graficador de alto desempeño
library(colorspace) # Paleta de colores
library(dplyr) #para usar funciones de ordenamiento, selección, agrupación
library(GGally)
library(tidyr) # para usar la función drop_na
library(PerformanceAnalytics)
library(psych)
library(ggraph)
library(plotly) #para crear gráficos interactivos
library(datos) # paquete que contienes diferentes bases de datos
library(epitools)
library(EnvStats)
library(stests)
library(PASWR2)
M <- replicate(100, ICZ(sample(Poblacion, 50, replace = T), sigma, alpha))
head(M, 1)
# Media de hombres menos media de mujeres
t.test(hombres$altura, mujeres$altura,conf.level = 0.95)$conf.int
abline(v = mu,lwd = 2)
abline(v = mu,lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
icz.promedio<-t.test(x = aire$Ozone, conf.level = 0.96)$conf.int
icz.promedio
mean(aire$Ozone)
icz.promedio<-t.test(x = aire$Ozone, conf.level = 0.96)$conf.int
icz.promedio
sd(aire$Ozone)
icz.promedio<-t.test(x = aire$Ozone, conf.level = 0.96)$conf.int
icz.promedio
length(aire$Ozone)
icz.promedio<-t.test(x = aire$Ozone, conf.level = 0.96, mu = mean(aire$Ozone))$conf.int
icz.promedio
length(aire$Ozone)
library(epitools)
library(EnvStats)
library(stests)
library(PASWR2)
library(bs)
library(epitools)
library(EnvStats)
library(stests)
library(PASWR2)
icz.promedio<-z.test(x = aire$Ozone, sigma.x = sd(aire$Ozone), conf.level = 0.96)
icz.promedio
length(aire$Ozone)
icz.promedio<-z.test(x = aire$Ozone, sigma.x = sd(aire$Ozone), conf.level = 0.96)$conf.int
icz.promedio
length(aire$Ozone)
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
mean(muestra)
set.seed(2000)
muestra<- sample(aire$Ozone, 25, replace = T)
ict.promedio<-t.test(x = muestra, conf.level = 0.96)$conf.int
ict.promedio
mean(muestra)
